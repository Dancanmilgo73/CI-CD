version: 2.1
orbs:
  slack: circleci/slack@4.1

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          template: basic_fail_1
          event: fail  

  destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        Workflow_ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              # Empty frontend bucket
              aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

              # Delete frontend stack
              aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

              # Delete backend stack
              aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>          


# -------------jobs -------------
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure         

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run test
      - notify_on_failure            

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm run test
      - notify_on_failure            

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Audit front-end
          command: |
            cd frontend
            npm install oauth-sign@^0.9.0
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure            

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Audit back-end
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical 
      - notify_on_failure  


deploy-infrastructure:
  docker:
    - image: cimg/python:3.10  
  steps:
    - checkout
    - install_awscli
    - run:
        name: Ensure frontend infrastructure exist
        command: |
          aws cloudformation deploy \
          --template-file .circleci/files/frontend.yml \
          --tags project=udapeople \
          --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
          --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"    
    - run:
        name: Ensure backend infrastructure exist
        command: |
          aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
    - run:
        name: Add back-end ip to ansible inventory
        command: |
          BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
          echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
          cat .circleci/ansible/inventory.txt            
    - persist_to_workspace:
        root: ~/
        paths:
          - project/.circleci/ansible/inventory.txt
         


# Added env variable
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]  
      - scan-frontend:
          requires: [build-frontend]                        
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]          